Microsoft (R) Macro Assembler Version 14.24.28316.0	    11/19/20 22:10:05
text.asm						     Page 1 - 1


				.686
				.MODEL FLAT, C
				.STACK
 00000000			.DATA
 00000000			.CODE
 00000000			_form_array PROC C NumRanDat:dword, arr:dword, LGrInt:dword, res_arr:dword

 00000003  B9 00000000		mov ecx,0 ;счетчик для прохода по массиву
 00000008  8B 5D 0C		mov ebx,[arr] ;входной массив
 0000000B  8B 75 10		mov esi,[LGrInt] ;массив с левыми границами
 0000000E  8B 7D 14		mov edi,[res_arr] ;массив-ответ

 00000011			fst_case:
 00000011  90				nop
 00000012  8B 03			mov eax,[ebx] ;берем элемент входного массива
 00000014  53				push ebx ; сохраняем указатель на текущий элемент
 00000015  BB 00000000			mov ebx,0 ; обнуляем указатель

 0000001A			snd_case:
 0000001A  8B D3			mov edx,ebx ; edx содержит текущий индекс массива границ
 0000001C  C1 E2 02			shl edx,2 ; индекс умножаем на 4, так как каждый элемент по 4 байт
 0000001F  3B 04 16			cmp eax,[esi+edx] ; сравниваем текующий элемент с текущей левой границей
 00000022  7F 02		jg searching_case
 00000024  EB 03		jmp exepting_case

 00000026			searching_case:
 00000026  43				inc ebx; инкрементируем, пока не найдем нужный интервал
 00000027  EB F1		jmp snd_case

 00000029			exepting_case:
 00000029  03 D7			add edx,edi ;в массиве-ответе инкерементируем счетчик 
 0000002B  8B 02			mov eax,[edx]
 0000002D  40				inc eax
 0000002E  89 02			mov [edx],eax;
 00000030  5B				pop ebx ;забираем текущий элемент и ссылаемся на новый
 00000031  83 C3 04			add ebx,4
 00000034  41				inc ecx ;инкрементируем индекс массива
 00000035  3B 4D 08			cmp ecx, NumRanDat
 00000038  7C D7		jl fst_case

				ret
 0000003C			_form_array ENDP

				END
Microsoft (R) Macro Assembler Version 14.24.28316.0	    11/19/20 22:10:05
text.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00000400 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000003C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_form_array  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003C Public C
  NumRanDat  . . . . . . . . . .	DWord	 bp + 00000008
  arr  . . . . . . . . . . . . .	DWord	 bp + 0000000C
  LGrInt . . . . . . . . . . . .	DWord	 bp + 00000010
  res_arr  . . . . . . . . . . .	DWord	 bp + 00000014
  fst_case . . . . . . . . . . .	L Near	 00000011 _TEXT	
  snd_case . . . . . . . . . . .	L Near	 0000001A _TEXT	
  searching_case . . . . . . . .	L Near	 00000026 _TEXT	
  exepting_case  . . . . . . . .	L Near	 00000029 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT

	   0 Warnings
	   0 Errors
